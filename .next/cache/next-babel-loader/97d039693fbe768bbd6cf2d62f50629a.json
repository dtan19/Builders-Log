{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/david/Dev/myapps/Builders-Log/pages/builders.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport LogList from '../components/Index/LogList';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\n\nfunction Builders(_ref) {\n  var logs = _ref.logs;\n  return __jsx(LogList, {\n    logs: logs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  });\n}\n\nBuilders.getInitialProps = function _callee(ctx) {\n  var _parseCookies, token, url, response;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _parseCookies = parseCookies(ctx), token = _parseCookies.token;\n\n          if (token) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            logs: []\n          });\n\n        case 3:\n          // fetch data on the server\n          url = \"\".concat(baseUrl, \"/api/logs\");\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(axios.get(url));\n\n        case 6:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            logs: response.data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default Builders;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/builders.js"],"names":["React","axios","LogList","baseUrl","parseCookies","Builders","logs","getInitialProps","ctx","token","url","get","response","data"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,YAAT,QAA6B,SAA7B;;AAEA,SAASC,QAAT,OAA4B;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC1B,SAAO,MAAC,OAAD;AAAS,IAAA,IAAI,EAAEA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAEDD,QAAQ,CAACE,eAAT,GAA2B,iBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACPJ,YAAY,CAACI,GAAD,CADL,EACjBC,KADiB,iBACjBA,KADiB;;AAAA,cAEpBA,KAFoB;AAAA;AAAA;AAAA;;AAAA,2CAGhB;AAAEH,YAAAA,IAAI,EAAE;AAAR,WAHgB;;AAAA;AAKzB;AACMI,UAAAA,GANmB,aAMVP,OANU;AAAA;AAAA,2CAOFF,KAAK,CAACU,GAAN,CAAUD,GAAV,CAPE;;AAAA;AAOnBE,UAAAA,QAPmB;AAAA,2CAQlB;AAAEN,YAAAA,IAAI,EAAEM,QAAQ,CAACC;AAAjB,WARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAaA,eAAeR,QAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport LogList from '../components/Index/LogList';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\n\nfunction Builders({ logs }) {\n  return <LogList logs={logs} />\n}\n\nBuilders.getInitialProps = async ctx => {\n  const { token } = parseCookies(ctx)\n  if (!token) {\n    return { logs: [] }\n  }\n  // fetch data on the server\n  const url = `${baseUrl}/api/logs`;\n  const response = await axios.get(url);\n  return { logs: response.data };\n  // return response data as an object\n  // note: this objest will be merged with existing props\n}\n\nexport default Builders;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Log from '../../models/Log';\nimport connectDb from \"../../utils/connectDb\";\nimport jwt from 'jsonwebtoken';\nimport User from '../../models/User';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Uh oh! You're not logged in.\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found.\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token.\");\n  }\n\n  const log = await Log.findOne({\n    _id\n  });\n  res.status(200).json(log);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    mediaUrl,\n    user,\n    date,\n    hours,\n    amount,\n    logType,\n    description,\n    notes\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n\n    if (!date || !logType || !description || !notes || !mediaUrl) {\n      return res.status(422).send(\"log missing one or more fields\");\n    }\n\n    const log = await new Log({\n      user: userId,\n      date,\n      hours,\n      amount,\n      logType,\n      description,\n      notes,\n      mediaUrl\n    }).save();\n    res.status(201).json(log);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server failed to create log.\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Log.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n} //export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/log.js"],"names":["Log","connectDb","jwt","User","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","status","send","_id","query","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","json","error","log","mediaUrl","date","hours","amount","logType","description","notes","body","save","console","findOneAndDelete"],"mappings":"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","sourcesContent":["import Log from '../../models/Log'\nimport connectDb from \"../../utils/connectDb\";\nimport jwt from 'jsonwebtoken';\nimport User from '../../models/User';\n\n\nconnectDb();\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"POST\":\n            await handlePostRequest(req, res);\n            break;\n        case \"DELETE\":\n            await handleDeleteRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`);\n            break;\n    }\n};\n\nasync function handleGetRequest(req, res) {\n    const { _id } = req.query\n    if (!(\"authorization\" in req.headers)) {\n        return res.status(401). send(\"Uh oh! You're not logged in.\")\n    }\n\n    try {\n        const { userId } = jwt.verify(req.headers.authorization, \n        process.env.JWT_SECRET)\n        const user = await User.findOne({ _id: userId })\n        if (user) {\n            res.status(200).json(user)\n        } else {\n            res.status(404).send(\"User not found.\")\n        }\n    } catch (error) {\n        res.status(403).send(\"Invalid token.\")\n    }\n    const log = await Log.findOne({ _id })\n    res.status(200).json(log)\n}\n\nasync function handlePostRequest(req, res) {\n    const { mediaUrl, user, date, hours, amount, logType, description, notes } = req.body\n    try {\n        // 1) Verify and get user id from token\n        const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n        if ( !date || !logType || !description || !notes || !mediaUrl ) {\n            return res.status(422).send(\"log missing one or more fields\");\n        }\n        const log = await new Log({\n            user: userId,\n            date,\n            hours,\n            amount,\n            logType,\n            description,\n            notes,\n            mediaUrl\n        }).save();\n        res.status(201).json(log);\n    } catch(error) {\n        console.error(error);\n        res.status(500).send(\"Server failed to create log.\")\n    }\n}\n\nasync function handleDeleteRequest(req, res) {\n    const { _id } = req.query\n    await Log.findOneAndDelete({ _id })\n    res.status(204).json({})\n}\n//export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};\n\n"]},"metadata":{},"sourceType":"module"}
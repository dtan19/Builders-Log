{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Uh oh! You're not logged in.\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found.\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token.\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","headers","status","send","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,EAAE,mBAAmBD,GAAG,CAACE,OAAzB,CAAJ,EAAuC;AACnC,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAiBC,IAAjB,CAAsB,8BAAtB,CAAP;AACH;;AAED,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaP,GAAG,CAACQ,MAAJ,CAAWN,GAAG,CAACE,OAAJ,CAAYK,aAAvB,EACnBC,OAAO,CAACC,GAAR,CAAYC,UADO,CAAnB;AAEA,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACe,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAER;AAAP,KAAb,CAAnB;;AACA,QAAIM,IAAJ,EAAU;AACNV,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqBH,IAArB;AACH,KAFD,MAEO;AACHV,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACH;AACJ,GATD,CASE,OAAOW,KAAP,EAAc;AACZd,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AACJ,CAjBD","sourcesContent":["import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\n\nconnectDb();\n\nexport default async (req, res) => {\n    if (!(\"authorization\" in req.headers)) {\n        return res.status(401). send(\"Uh oh! You're not logged in.\")\n    }\n\n    try {\n        const { userId } = jwt.verify(req.headers.authorization, \n        process.env.JWT_SECRET)\n        const user = await User.findOne({ _id: userId })\n        if (user) {\n            res.status(200).json(user)\n        } else {\n            res.status(404).send(\"User not found.\")\n        }\n    } catch (error) {\n        res.status(403).send(\"Invalid token.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
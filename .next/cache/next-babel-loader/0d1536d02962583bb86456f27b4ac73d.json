{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Validate the name, email, and password values\n    if (!isLength(name, {\n      min: 3,\n      max: 20\n    })) {\n      return res.status(422).send(\"Name must be 3-20 characters long.\");\n    } else if (!isLength(password, {\n      min: 8,\n      max: 20\n    })) {\n      return res.status(422).send(\"Password must be 8-20 characters long.\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid - EX: name@email.com\");\n    } // 1) Check to see if the user already exists in the db\n\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    } // 2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); // 3) create user\n\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save();\n    console.log({\n      newUser\n    }); // 4) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); // 5) send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later.\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/signup.js"],"names":["connectDb","User","bcrypt","jwt","isEmail","isLength","req","res","name","email","password","body","min","max","status","send","user","findOne","hash","newUser","save","console","log","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEAL,SAAS;AAET,gBAAe,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AACA;AACA,QAAI,CAACN,QAAQ,CAACG,IAAD,EAAO;AAACI,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,GAAG,EAAE;AAAd,KAAP,CAAb,EAAwC;AACpC,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAArB,CAAP;AACH,KAFD,MAEO,IAAI,CAACV,QAAQ,CAACK,QAAD,EAAW;AAACE,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,GAAG,EAAE;AAAd,KAAX,CAAb,EAA4C;AAC/C,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACH,KAFM,MAEA,IAAI,CAACX,OAAO,CAACK,KAAD,CAAZ,EAAqB;AACxB,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB,CAAP;AACH,KARD,CASA;;;AACA,UAAMC,IAAI,GAAG,MAAMf,IAAI,CAACgB,OAAL,CAAa;AAAER,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAIO,IAAJ,EAAU;AACN,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACH,KAbD,CAcA;;;AACA,UAAMS,IAAI,GAAG,MAAMhB,MAAM,CAACgB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAAnB,CAfA,CAgBA;;AACA,UAAMS,OAAO,GAAG,MAAM,IAAIlB,IAAJ,CAAS;AAC3BO,MAAAA,IAD2B;AAE3BC,MAAAA,KAF2B;AAG3BC,MAAAA,QAAQ,EAAEQ;AAHiB,KAAT,EAInBE,IAJmB,EAAtB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA;AAAD,KAAZ,EAtBA,CAuBA;;AACA,UAAMI,KAAK,GAAGpB,GAAG,CAACqB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEN,OAAO,CAACO;AAAlB,KAAT,EACdC,OAAO,CAACC,GAAR,CAAYC,UADE,EACU;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADV,CAAd,CAxBA,CA0BA;;AACAvB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBR,KAArB;AACH,GA5BD,CA4BE,OAAOS,KAAP,EAAc;AACZX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAzB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gDAArB;AACH;AACJ,CAlCD","sourcesContent":["import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\n\nconnectDb();\n\nexport default async (req, res) => {\n    const { name, email, password } = req.body\n    try {\n        // 1) Validate the name, email, and password values\n        if (!isLength(name, {min: 3, max: 20})) {\n            return res.status(422).send(\"Name must be 3-20 characters long.\")\n        } else if (!isLength(password, {min: 8, max: 20})) {\n            return res.status(422).send(\"Password must be 8-20 characters long.\")\n        } else if (!isEmail(email)) {\n            return res.status(422).send(\"Email must be valid - EX: name@email.com\")\n        }\n        // 1) Check to see if the user already exists in the db\n        const user = await User.findOne({ email })\n        if (user) {\n            return res.status(422).send(`User already exists with email ${email}`)\n        }\n        // 2) --if not, hash their password\n        const hash = await bcrypt.hash(password, 10)\n        // 3) create user\n        const newUser = await new User({\n            name,\n            email,\n            password: hash\n        }).save()\n        console.log({newUser})\n        // 4) create token for the new user\n        const token = jwt.sign({ userId: newUser._id }, \n        process.env.JWT_SECRET, { expiresIn: '7d' })\n        // 5) send back token\n        res.status(201).json(token)\n    } catch (error) {\n        console.error(error)\n        res.status(500).send(\"Error signing up user. Please try again later.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
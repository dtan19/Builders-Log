{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken'; //import isEmail from 'validator/lib/isEmail';\n//import isLength from 'validator/lib/isLength';\n\nconnectDb;\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Check to see if a user exists  with provided email.\n    const user = await User.findOne({\n      email\n    }).select('+password'); // 2) --if not, return error.\n\n    if (!user) {\n      return res.status(404).send(\"No user exists with that email.\");\n    } // 3) Check to see if users' password matches the one in the db.\n\n\n    const passwordsMatch = await bcrypt.compare(password, user.password); // 4) --if not, generate token\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      }); // 5) Send that token to the client\n\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Password is incorrect.\");\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user.\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/login.js"],"names":["connectDb","User","bcrypt","jwt","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CACA;AACA;;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACA;AACA,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACS,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB,CAFA,CAGA;;AACA,QAAI,CAACF,IAAL,EAAW;AACP,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iCAArB,CAAP;AACH,KAND,CAOA;;;AACA,UAAMC,cAAc,GAAG,MAAMZ,MAAM,CAACa,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA7B,CARA,CASA;;AACA,QAAIO,cAAJ,EAAoB;AAChB,YAAME,KAAK,GAAGb,GAAG,CAACc,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OAAT,EACdC,OAAO,CAACC,GAAR,CAAYC,UADE,EACU;AAAEC,QAAAA,SAAS,EAAE;AAAb,OADV,CAAd,CADgB,CAGpB;;AACAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACH,KALG,MAKG;AACHX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACH;AACJ,GAlBG,CAkBF,OAAOY,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACC;AACJ,CAxBD","sourcesContent":["import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n//import isEmail from 'validator/lib/isEmail';\n//import isLength from 'validator/lib/isLength';\n\nconnectDb;\n\nexport default async (req, res) => {\n    const { email, password } = req.body\n    try {\n        // 1) Check to see if a user exists  with provided email.\n        const user = await User.findOne({ email }).select('+password')\n        // 2) --if not, return error.\n        if (!user) {\n            return res.status(404).send(\"No user exists with that email.\")\n        }\n        // 3) Check to see if users' password matches the one in the db.\n        const passwordsMatch = await bcrypt.compare(password, user.password)\n        // 4) --if not, generate token\n        if (passwordsMatch) {\n            const token = jwt.sign({ userId: user._id }, \n            process.env.JWT_SECRET, { expiresIn: '7d' })\n        // 5) Send that token to the client\n        res.status(200).json(token)\n    } else {\n        res.status(401).send(\"Password is incorrect.\")\n    }\n} catch (error) {\n    console.error(error)\n    res.status(500).send(\"Error logging in user.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
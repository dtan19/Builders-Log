{"ast":null,"code":"//import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"User not logged in.\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please sign in again\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/cart.js"],"names":["jwt","Cart","connectDb","req","res","headers","status","send","userId","verify","authorization","process","env","JWT_SECRET","cart","findOne","user","populate","path","model","json","products","error","console"],"mappings":"AAAA;AACA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,EAAE,mBAAmBD,GAAG,CAACE,OAAzB,CAAJ,EAAuC;AACnC,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACH;;AAAC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAaR,GAAG,CAACS,MAAJ,CAAWN,GAAG,CAACE,OAAJ,CAAYK,aAAvB,EACnBC,OAAO,CAACC,GAAR,CAAYC,UADO,CAAnB;AAEA,UAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAb,EAA+BS,QAA/B,CAAwC;AACvDC,MAAAA,IAAI,EAAE,kBADiD;AAEvDC,MAAAA,KAAK,EAAE;AAFgD,KAAxC,CAAnB;AAIAf,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqBN,IAAI,CAACO,QAA1B;AACH,GARC,CAQA,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAlB,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;AACH;AACJ,CAfD","sourcesContent":["//import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\n\nconnectDb();\n\nexport default async (req, res) => {\n    if (!(\"authorization\" in req.headers)) {\n        return res.status(401).send(\"User not logged in.\");\n    } try {\n        const { userId } = jwt.verify(req.headers.authorization, \n        process.env.JWT_SECRET)\n        const cart = await Cart.findOne({ user: userId }).populate({\n            path: \"products.product\",\n            model: \"Product\"\n        })\n        res.status(200).json(cart.products)\n    } catch (error) {\n        console.error(error)\n        res.status(403).send(\"Please sign in again\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
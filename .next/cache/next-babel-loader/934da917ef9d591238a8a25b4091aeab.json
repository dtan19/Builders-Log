{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Uh oh! You're not logged in.\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found.\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token.\");\n  }\n}\n\nasync function handlePutRequest(req, res) {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findByIdAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User updated.');\n}","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","method","handleGetRequest","handlePutRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error","role","body","findByIdAndUpdate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,KAAL;AACI,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASN,GAAG,CAACE,MAAO,cAA1C;AACA;AATR;AAWH,CAZD;;AAcA,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACtC,MAAI,EAAE,mBAAmBD,GAAG,CAACO,OAAzB,CAAJ,EAAuC;AACnC,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAiBC,IAAjB,CAAsB,8BAAtB,CAAP;AACH;;AAED,MAAI;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAaV,GAAG,CAACW,MAAJ,CAAWT,GAAG,CAACO,OAAJ,CAAYG,aAAvB,EACnBC,OAAO,CAACC,GAAR,CAAYC,UADO,CAAnB;AAEA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAER;AAAP,KAAb,CAAnB;;AACA,QAAIM,IAAJ,EAAU;AACNb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBH,IAArB;AACH,KAFD,MAEO;AACHb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACH;AACJ,GATD,CASE,OAAOY,KAAP,EAAc;AACZjB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AACJ;;AAED,eAAeF,gBAAf,CAAgCJ,GAAhC,EAAqCC,GAArC,EAA0C;AACtC,QAAM;AAAEe,IAAAA,GAAF;AAAOG,IAAAA;AAAP,MAAgBnB,GAAG,CAACoB,IAA1B;AACA,QAAMvB,IAAI,CAACwB,iBAAL,CACF;AAAEL,IAAAA;AAAF,GADE,EAEF;AAAEG,IAAAA;AAAF,GAFE,CAAN;AAIAlB,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACH","sourcesContent":["import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\n\nconnectDb();\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"PUT\":\n            await handlePutRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`)\n            break;\n    }\n}\n\nasync function handleGetRequest(req, res) {\n    if (!(\"authorization\" in req.headers)) {\n        return res.status(401). send(\"Uh oh! You're not logged in.\")\n    }\n\n    try {\n        const { userId } = jwt.verify(req.headers.authorization, \n        process.env.JWT_SECRET)\n        const user = await User.findOne({ _id: userId })\n        if (user) {\n            res.status(200).json(user)\n        } else {\n            res.status(404).send(\"User not found.\")\n        }\n    } catch (error) {\n        res.status(403).send(\"Invalid token.\")\n    }\n}\n\nasync function handlePutRequest(req, res) {\n    const { _id, role } = req.body\n    await User.findByIdAndUpdate(\n        { _id },\n        { role }\n    )\n    res.status(203).send('User updated.')\n}"]},"metadata":{},"sourceType":"module"}
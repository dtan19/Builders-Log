{"ast":null,"code":"import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nexport default (async (req, res) => {\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // 2) Find cart based on user id, populate it\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    }); // 3) Calculate cart totals again from cart products\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products); // 4) Get email from payment data, see if email is linked with existing Stripe customer data\n\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0; // 5) If not existing customer, create them based on their email\n\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id; // 6) Create charge with total, send reciept email\n\n    const charge = await stripe.charges.create({\n      currency: \"usd\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      idempotency_key: uuidv4()\n    }); // 7) Add order data to database\n\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    }).save(); // 8) Clear products in cart\n\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    }); // 9) Send back success (200) response\n\n    res.status(200).send(\"Checkout successful\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Stripe system failed to respond.\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}
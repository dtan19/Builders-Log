{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/david/Dev/myapps/Builders-Log/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies, destroyCookie } from 'nookies';\nimport { redirectUser } from '../utils/auth';\nimport baseUrl from '../utils/baseUrl';\nimport axios from \"axios\";\nimport Router from 'next/router';\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"syncLogout\", event => {\n      if (event.key === 'logout') {\n        Router.push('/login');\n      }\n    });\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === '/account' || ctx.pathname === '/create';\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, '/login');\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === 'root';\n        const isAdmin = user.role === 'admin'; // If authenticated, but not of role admin, or root, we want to redirect from '/create' page.\n\n        const isNotPermitted = !(isRoot || isAdmin) && ctx.pathname === '/create';\n\n        if (isNotPermitted) {\n          redirectUser(ctx, '/');\n        }\n\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user.\", error); // Throw out invalid token\n\n        destroyCookie(ctx, \"token\"); // Redirect to login page\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.syncLogout);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/_app.js"],"names":["App","Layout","parseCookies","destroyCookie","redirectUser","baseUrl","axios","Router","MyApp","event","key","push","getInitialProps","Component","ctx","token","pageProps","isProtectedRoute","pathname","payload","headers","Authorization","url","response","get","user","data","isRoot","role","isAdmin","isNotPermitted","error","console","componentDidMount","window","addEventListener","syncLogout","render","props"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,SAA5C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,KAAN,SAAoBR,GAApB,CAAwB;AAAA;AAAA;;AAAA,wCA6CXS,KAAK,IAAI;AACpB,UAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1BH,QAAAA,MAAM,CAACI,IAAP,CAAY,QAAZ;AACD;AACF,KAjDuB;AAAA;;AACtB,eAAaC,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAM;AAAEC,MAAAA;AAAF,QAAYb,YAAY,CAACY,GAAD,CAA9B;AAEA,QAAIE,SAAS,GAAG,EAAhB;;AAEA,QAAIH,SAAS,CAACD,eAAd,EAA+B;AAC7BI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AAED,QAAI,CAACC,KAAL,EAAY;AACV,YAAME,gBAAgB,GAAGH,GAAG,CAACI,QAAJ,KAAiB,UAAjB,IAA+BJ,GAAG,CAACI,QAAJ,KAAiB,SAAzE;;AACA,UAAID,gBAAJ,EAAsB;AACpBb,QAAAA,YAAY,CAACU,GAAD,EAAM,QAAN,CAAZ;AACD;AACF,KALD,MAKO;AACL,UAAI;AACF,cAAMK,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAEN;AAAjB;AAAX,SAAhB;AACA,cAAMO,GAAG,GAAI,GAAEjB,OAAQ,cAAvB;AACA,cAAMkB,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUF,GAAV,EAAeH,OAAf,CAAvB;AACA,cAAMM,IAAI,GAAGF,QAAQ,CAACG,IAAtB;AACA,cAAMC,MAAM,GAAGF,IAAI,CAACG,IAAL,KAAc,MAA7B;AACA,cAAMC,OAAO,GAAGJ,IAAI,CAACG,IAAL,KAAc,OAA9B,CANE,CAOF;;AACA,cAAME,cAAc,GAAG,EAAEH,MAAM,IAAIE,OAAZ,KAAwBf,GAAG,CAACI,QAAJ,KAAiB,SAAhE;;AACA,YAAIY,cAAJ,EAAoB;AAClB1B,UAAAA,YAAY,CAACU,GAAD,EAAM,GAAN,CAAZ;AACD;;AACDE,QAAAA,SAAS,CAACS,IAAV,GAAiBA,IAAjB;AACD,OAbD,CAaE,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C,EADc,CAEd;;AACA5B,QAAAA,aAAa,CAACW,GAAD,EAAM,OAAN,CAAb,CAHc,CAId;;AACAV,QAAAA,YAAY,CAACU,GAAD,EAAM,QAAN,CAAZ;AACD;AACF;;AAED,WAAO;AAAEE,MAAAA;AAAF,KAAP;AACD;;AAEHiB,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,UAAxC;AACD;;AAQCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExB,MAAAA,SAAF;AAAaG,MAAAA;AAAb,QAA2B,KAAKsB,KAAtC;AACA,WACA,MAAC,MAAD,eAAYtB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADA;AAKD;;AA1DqB;;AA6DxB,eAAeR,KAAf","sourcesContent":["import App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies, destroyCookie } from 'nookies';\nimport { redirectUser } from '../utils/auth';\nimport baseUrl from '../utils/baseUrl';\nimport axios from \"axios\";\nimport Router from 'next/router';\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const { token } = parseCookies(ctx)\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === '/account' || ctx.pathname === '/create'\n      if (isProtectedRoute) {\n        redirectUser(ctx, '/login')\n      } \n    } else {\n      try {\n        const payload = { headers: { Authorization: token } }\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === 'root';\n        const isAdmin = user.role === 'admin';\n        // If authenticated, but not of role admin, or root, we want to redirect from '/create' page.\n        const isNotPermitted = !(isRoot || isAdmin) && ctx.pathname === '/create';\n        if (isNotPermitted) {\n          redirectUser(ctx, '/')\n        }\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user.\", error);\n        // Throw out invalid token\n        destroyCookie(ctx, \"token\");\n        // Redirect to login page\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return { pageProps }\n  }\n\ncomponentDidMount() {\n  window.addEventListener('storage', this.syncLogout);\n}\n\nsyncLogout = event => {\n  if (event.key === 'logout') {\n    Router.push('/login')\n  }\n}\n\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n    <Layout {...pageProps}>\n      <Component {...pageProps} />\n    </Layout>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}
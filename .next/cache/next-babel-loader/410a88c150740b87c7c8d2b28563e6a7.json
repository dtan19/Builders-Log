{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport Cart from '../../models/Cart';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Validate the name, email, and password values\n    if (!isLength(name, {\n      min: 3,\n      max: 20\n    })) {\n      return res.status(422).send(\"Name must be 3-20 characters long.\");\n    } else if (!isLength(password, {\n      min: 8,\n      max: 20\n    })) {\n      return res.status(422).send(\"Password must be 8-20 characters long.\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid - EX: name@email.com\");\n    } // 1) Check to see if the user already exists in the db\n\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    } // 2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); // 3) create user\n\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save(); // 5) Create a new cart for the new user\n\n    await new Cart({\n      user: newUser._id\n    }).save(); // 4) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); // 5) send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later.\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}
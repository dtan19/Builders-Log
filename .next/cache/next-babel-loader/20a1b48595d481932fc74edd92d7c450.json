{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/david/Dev/myapps/Builders-Log/components/Log/ReactTable.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n  }\\n\\n  .pagination {\\n    padding: 0.5rem;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTable, useGroupBy, useFilters, useSortBy, useExpanded, usePagination } from 'react-table';\nimport makeData from './makeData';\nvar Styles = styled.div(_templateObject()); // Create an editable cell renderer\n\nvar EditableCell = function EditableCell(_ref) {\n  var initialValue = _ref.cell.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateMyData = _ref.updateMyData;\n\n  // We need to keep and update the state of the cell normally\n  var _React$useState = React.useState(initialValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  React.useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  });\n}; // Set our editable cell renderer as the default Cell renderer\n\n\nvar defaultColumn = {\n  Cell: EditableCell\n}; // Be sure to pass our updateMyData and the skipPageReset option\n\nfunction Table(_ref2) {\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateMyData = _ref2.updateMyData,\n      skipPageReset = _ref2.skipPageReset;\n\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize; // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, '>>'), ' ', __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Show \", pageSize);\n  }))));\n}\n\nfunction TableApp() {\n  var columns = React.useMemo(function () {\n    return [{\n      Header: 'Name',\n      columns: [{\n        Header: 'First Name',\n        accessor: 'firstName'\n      }, {\n        Header: 'Last Name',\n        accessor: 'lastName'\n      }]\n    }, {\n      Header: 'Info',\n      columns: [{\n        Header: 'Age',\n        accessor: 'age'\n      }, {\n        Header: 'Visits',\n        accessor: 'visits'\n      }, {\n        Header: 'Status',\n        accessor: 'status'\n      }, {\n        Header: 'Profile Progress',\n        accessor: 'progress'\n      }]\n    }];\n  }, []);\n\n  var _React$useState3 = React.useState(function () {\n    return makeData(20);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      data = _React$useState4[0],\n      setData = _React$useState4[1];\n\n  var _React$useState5 = React.useState(data),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      originalData = _React$useState6[0];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      skipPageReset = _React$useState8[0],\n      setSkipPageReset = _React$useState8[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateMyData = function updateMyData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread({}, old[rowIndex], _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  React.useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]); // Let's add a data resetter/randomizer to help\n  // illustrate that flow...\n\n  var resetData = function resetData() {\n    return setData(originalData);\n  };\n\n  return __jsx(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    onClick: resetData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"Reset Data\"), __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }));\n}\n\nexport default TableApp;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/components/Log/ReactTable.js"],"names":["React","styled","useTable","useGroupBy","useFilters","useSortBy","useExpanded","usePagination","makeData","Styles","div","EditableCell","initialValue","cell","value","index","row","id","column","updateMyData","useState","setValue","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","Table","columns","data","skipPageReset","autoResetPage","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","getCellProps","length","Number","width","TableApp","useMemo","Header","accessor","setData","originalData","setSkipPageReset","rowIndex","columnId","old","resetData"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport {\n  useTable,\n  useGroupBy,\n  useFilters,\n  useSortBy,\n  useExpanded,\n  usePagination,\n} from 'react-table'\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  cell: { value: initialValue },\n  row: { index },\n  column: { id },\n  updateMyData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue)\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateMyData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return <input value={value} onChange={onChange} onBlur={onBlur} />\n}\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell,\n}\n\n// Be sure to pass our updateMyData and the skipPageReset option\nfunction Table({ columns, data, updateMyData, skipPageReset }) {\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n    },\n    usePagination\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nfunction TableApp() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n        ],\n      },\n      {\n        Header: 'Info',\n        columns: [\n          {\n            Header: 'Age',\n            accessor: 'age',\n          },\n          {\n            Header: 'Visits',\n            accessor: 'visits',\n          },\n          {\n            Header: 'Status',\n            accessor: 'status',\n          },\n          {\n            Header: 'Profile Progress',\n            accessor: 'progress',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const [data, setData] = React.useState(() => makeData(20))\n  const [originalData] = React.useState(data)\n  const [skipPageReset, setSkipPageReset] = React.useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  // Let's add a data resetter/randomizer to help\n  // illustrate that flow...\n  const resetData = () => setData(originalData)\n\n  return (\n    <Styles>\n      <button onClick={resetData}>Reset Data</button>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n      />\n    </Styles>\n  )\n}\n\nexport default TableApp;\n\n\n"]},"metadata":{},"sourceType":"module"}
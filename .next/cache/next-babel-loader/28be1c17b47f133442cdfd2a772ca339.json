{"ast":null,"code":"import Log from '../../models/Log';\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  const log = await Log.findOne({\n    _id\n  });\n  res.status(200).json(log);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    mediaUrl,\n    date,\n    logType,\n    hours,\n    amount,\n    description,\n    notes\n  } = req.body;\n\n  try {\n    if (!mediaUrl || !date || !logType || !hours || !amount || !description || !notes) {\n      return res.status(422).send(\"log missing one or more fields\");\n    }\n\n    const log = await new Log({\n      mediaUrl,\n      date,\n      logType,\n      hours,\n      amount,\n      description,\n      notes\n    }).save();\n    res.status(201).json(log);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server failed to create log.\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Log.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n} //export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/logs.js"],"names":["Log","connectDb","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","status","send","_id","query","log","findOne","json","mediaUrl","date","logType","hours","amount","description","notes","body","save","error","console","findOneAndDelete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,kBAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,KAAL;AACI,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ,SAAK,MAAL;AACI,YAAMG,iBAAiB,CAACJ,GAAD,EAAMC,GAAN,CAAvB;AACA;;AACJ,SAAK,QAAL;AACI,YAAMI,mBAAmB,CAACL,GAAD,EAAMC,GAAN,CAAzB;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASP,GAAG,CAACE,MAAO,cAA1C;AACA;AAZR;AAcH,CAfD;;AAiBA,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACtC,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB;AACA,QAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,OAAJ,CAAY;AAAEH,IAAAA;AAAF,GAAZ,CAAlB;AACAP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,GAArB;AACH;;AAED,eAAeN,iBAAf,CAAiCJ,GAAjC,EAAsCC,GAAtC,EAA2C;AACvC,QAAM;AAAEY,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA,MAAlC;AAA0CC,IAAAA,WAA1C;AAAuDC,IAAAA;AAAvD,MAAiEnB,GAAG,CAACoB,IAA3E;;AACA,MAAI;AACA,QAAK,CAACP,QAAD,IAAa,CAACC,IAAd,IAAsB,CAACC,OAAvB,IAAkC,CAACC,KAAnC,IAA4C,CAACC,MAA7C,IAAsD,CAACC,WAAvD,IAAsE,CAACC,KAA5E,EAAmF;AAC/E,aAAOlB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB,CAAP;AACH;;AACD,UAAMG,GAAG,GAAG,MAAM,IAAIZ,GAAJ,CAAQ;AACtBe,MAAAA,QADsB;AAEtBC,MAAAA,IAFsB;AAGtBC,MAAAA,OAHsB;AAItBC,MAAAA,KAJsB;AAKtBC,MAAAA,MALsB;AAMtBC,MAAAA,WANsB;AAOtBC,MAAAA;AAPsB,KAAR,EAQfE,IARe,EAAlB;AASApB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,GAArB;AACH,GAdD,CAcE,OAAMY,KAAN,EAAa;AACXC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACArB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;AACJ;;AAED,eAAeF,mBAAf,CAAmCL,GAAnC,EAAwCC,GAAxC,EAA6C;AACzC,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB;AACA,QAAMX,GAAG,CAAC0B,gBAAJ,CAAqB;AAAEhB,IAAAA;AAAF,GAArB,CAAN;AACAP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAArB;AACH,C,CACD;AACA;AACA;AACA;AACA","sourcesContent":["import Log from '../../models/Log'\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"POST\":\n            await handlePostRequest(req, res);\n            break;\n        case \"DELETE\":\n            await handleDeleteRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`);\n            break;\n    }\n};\n\nasync function handleGetRequest(req, res) {\n    const { _id } = req.query\n    const log = await Log.findOne({ _id })\n    res.status(200).json(log)\n}\n\nasync function handlePostRequest(req, res) {\n    const { mediaUrl, date, logType, hours, amount, description, notes } = req.body\n    try {\n        if ( !mediaUrl || !date || !logType || !hours || !amount|| !description || !notes) {\n            return res.status(422).send(\"log missing one or more fields\");\n        }\n        const log = await new Log({\n            mediaUrl,\n            date,\n            logType,\n            hours,\n            amount,\n            description,\n            notes\n        }).save();\n        res.status(201).json(log);\n    } catch(error) {\n        console.error(error);\n        res.status(500).send(\"Server failed to create log.\")\n    }\n}\n\nasync function handleDeleteRequest(req, res) {\n    const { _id } = req.query\n    await Log.findOneAndDelete({ _id })\n    res.status(204).json({})\n}\n//export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};\n\n"]},"metadata":{},"sourceType":"module"}
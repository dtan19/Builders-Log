{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Form, Item, Input, TextArea, Dropdown, Button, Image, Message, Header, Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport catchErrors from '../utils/catchErrors';\nimport Router from 'next/router';\nvar INITIAL_ORDER = {\n  user: \"\",\n  products: [],\n  name: \"\",\n  phone: \"\",\n  email: \"\",\n  notes: \"\",\n  orderStatus: \"\",\n  total: \"\",\n  media: \"\"\n};\nvar statusOptions = [{\n  key: \"Open\",\n  text: \"Open\",\n  value: \"Open\"\n}, {\n  key: \"Complete\",\n  text: \"Complete\",\n  value: \"Complete\"\n}];\n\nfunction CreateOrder(_id, user) {\n  var _useState = useState(INITIAL_ORDER),\n      record = _useState[0],\n      setRecord = _useState[1];\n\n  var _useState2 = useState(''),\n      mediaPreview = _useState2[0],\n      setMediaPreview = _useState2[1];\n\n  var _useState3 = useState(false),\n      success = _useState3[0],\n      setSuccess = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(true),\n      disabled = _useState5[0],\n      setDisabled = _useState5[1];\n\n  var _useState6 = useState(''),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  React.useEffect(function () {\n    var isOrder = _Object$values(record).every(function (el) {\n      return Boolean(el);\n    });\n\n    isOrder ? setDisabled(false) : setDisabled(true);\n  }, [record]);\n\n  function handleChange(event, data) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value,\n        text = _event$target.text,\n        files = _event$target.files;\n\n    if (name === \"media\") {\n      setRecord(function (prevState) {\n        return _objectSpread({}, prevState, {\n          media: files[0]\n        });\n      });\n      setMediaPreview(window.URL.createObjectURL(files[0]));\n    } else {\n      setRecord(function (prevState) {\n        return _objectSpread({}, prevState, _defineProperty({}, name, value));\n      }); //setStatus(prevState => ({ ...prevState, [name]: data }));\n\n      console.log(INITIAL_ORDER);\n    }\n  }\n\n  function handleSelect(event, data) {\n    INITIAL_ORDER.orderStatus = data.value;\n    console.log(INITIAL_ORDER.orderStatus);\n  }\n\n  function handleImageUpload() {\n    var data, response, mediaUrl;\n    return _regeneratorRuntime.async(function handleImageUpload$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = new FormData();\n            data.append('file', record.media);\n            data.append('upload_preset', 'builders-log');\n            data.append('cloud_name', 'dtan19');\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(axios.post(process.env.CLOUDINARY_URL, data));\n\n          case 6:\n            response = _context.sent;\n            mediaUrl = response.data.url;\n            console.log(mediaUrl);\n            return _context.abrupt(\"return\", mediaUrl);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  }\n\n  function handleSubmit(event) {\n    var mediaUrl, url, name, phone, email, notes, orderStatus, total, payload, response, orderId;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            event.preventDefault();\n            setLoading(true);\n            setError('');\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(handleImageUpload());\n\n          case 6:\n            mediaUrl = _context2.sent;\n            url = \"\".concat(baseUrl, \"/api/order\");\n            name = record.name, phone = record.phone, email = record.email, notes = record.notes, orderStatus = record.orderStatus, total = record.total;\n            payload = {\n              mediaUrl: mediaUrl,\n              name: name,\n              phone: phone,\n              email: email,\n              notes: notes,\n              orderStatus: orderStatus,\n              total: total\n            };\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap(axios.post(url, payload));\n\n          case 12:\n            response = _context2.sent;\n            //console.log({ response });\n            setRecord(INITIAL_ORDER);\n            setSuccess(true);\n            orderId = response.data._id;\n            Router.push(\"/order?_id=\".concat(orderId));\n            _context2.next = 22;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](0);\n            catchErrors(_context2.t0, setError);\n\n          case 22:\n            _context2.prev = 22;\n            setLoading(false);\n            return _context2.finish(22);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 19, 22, 25]], _Promise);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    as: \"h2\",\n    block: true\n  }, __jsx(Icon, {\n    name: \"add\",\n    color: \"orange\"\n  }), \"Create an Order\"), __jsx(Form, {\n    loading: loading,\n    error: Boolean(error),\n    success: success,\n    onSubmit: handleSubmit\n  }, __jsx(Message, {\n    error: true,\n    header: \"Oops!\",\n    content: error\n  }), __jsx(Message, {\n    success: true,\n    icon: \"check\",\n    header: \"Success\",\n    content: \"Your order has been created\"\n  }), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"media\",\n    type: \"file\",\n    label: \"Media\" //accept=\"image/*\"\n    ,\n    content: \"Select Image\",\n    onChange: handleChange\n  })), __jsx(Image, {\n    src: mediaPreview,\n    rounded: true,\n    centered: true,\n    size: \"small\"\n  }), __jsx(Form.Group, null, __jsx(\"p\", null, \"Create your own order:\")), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"name\",\n    label: \"Name\",\n    placeholder: \"Jane Smith\",\n    value: record.name,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"phone\",\n    label: \"Phone\",\n    placeholder: \"801-555-1234\",\n    value: record.phone,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"email\",\n    label: \"Email\",\n    placeholder: \"name@email.com\",\n    value: record.email,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: TextArea,\n    name: \"notes\",\n    label: \"Notes\",\n    placeholder: \"Type any special instructions here.\",\n    value: record.notes,\n    onChange: handleChange\n  })), __jsx(Form.Group, null, __jsx(Form.Dropdown, {\n    selection: true,\n    name: \"orderStatus\",\n    label: \"Status\",\n    placeholder: \"Open\",\n    options: statusOptions,\n    onChange: handleSelect,\n    required: true\n  }), __jsx(Form.Field, {\n    control: Input,\n    name: \"total\",\n    label: \"Total\",\n    placeholder: \"3.99\",\n    value: record.total,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Field, {\n    control: Button //disabled={disabled || loading}\n    ,\n    color: \"blue\",\n    content: \"Create\",\n    type: \"Submit\"\n  })));\n}\n\nexport default CreateOrder;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Form, Item, Input, TextArea, Dropdown, Button, Image, Message, Header, Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport catchErrors from '../utils/catchErrors';\nimport Router from 'next/router';\nconst INITIAL_ORDER = {\n  user: \"\",\n  products: [],\n  name: \"\",\n  phone: \"\",\n  email: \"\",\n  notes: \"\",\n  orderStatus: \"\",\n  total: \"\",\n  media: \"\"\n};\nconst statusOptions = [{\n  key: \"Open\",\n  text: \"Open\",\n  value: \"Open\"\n}, {\n  key: \"Complete\",\n  text: \"Complete\",\n  value: \"Complete\"\n}];\n\nfunction CreateOrder(_id, user) {\n  const {\n    0: record,\n    1: setRecord\n  } = useState(INITIAL_ORDER);\n  const {\n    0: mediaPreview,\n    1: setMediaPreview\n  } = useState('');\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  React.useEffect(() => {\n    const isOrder = Object.values(record).every(el => Boolean(el));\n    isOrder ? setDisabled(false) : setDisabled(true);\n  }, [record]);\n\n  function handleChange(event, data) {\n    const {\n      name,\n      value,\n      text,\n      files\n    } = event.target;\n\n    if (name === \"media\") {\n      setRecord(prevState => _objectSpread({}, prevState, {\n        media: files[0]\n      }));\n      setMediaPreview(window.URL.createObjectURL(files[0]));\n    } else {\n      setRecord(prevState => _objectSpread({}, prevState, {\n        [name]: value\n      })); //setStatus(prevState => ({ ...prevState, [name]: data }));\n\n      console.log(INITIAL_ORDER);\n    }\n  }\n\n  function handleSelect(event, data) {\n    INITIAL_ORDER.orderStatus = data.value;\n    console.log(INITIAL_ORDER.orderStatus);\n  }\n\n  async function handleImageUpload() {\n    const data = new FormData();\n    data.append('file', record.media);\n    data.append('upload_preset', 'builders-log');\n    data.append('cloud_name', 'dtan19');\n    const response = await axios.post(process.env.CLOUDINARY_URL, data);\n    const mediaUrl = response.data.url;\n    console.log(mediaUrl);\n    return mediaUrl;\n  }\n\n  async function handleSubmit(event) {\n    try {\n      event.preventDefault();\n      setLoading(true);\n      setError('');\n      const mediaUrl = await handleImageUpload();\n      const url = `${baseUrl}/api/order`;\n      const {\n        name,\n        phone,\n        email,\n        notes,\n        orderStatus,\n        total\n      } = record;\n      const payload = {\n        mediaUrl,\n        name,\n        phone,\n        email,\n        notes,\n        orderStatus,\n        total\n      };\n      const response = await axios.post(url, payload); //console.log({ response });\n\n      setRecord(INITIAL_ORDER);\n      setSuccess(true);\n      const orderId = response.data._id;\n      Router.push(`/order?_id=${orderId}`);\n    } catch (error) {\n      catchErrors(error, setError);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    as: \"h2\",\n    block: true\n  }, __jsx(Icon, {\n    name: \"add\",\n    color: \"orange\"\n  }), \"Create an Order\"), __jsx(Form, {\n    loading: loading,\n    error: Boolean(error),\n    success: success,\n    onSubmit: handleSubmit\n  }, __jsx(Message, {\n    error: true,\n    header: \"Oops!\",\n    content: error\n  }), __jsx(Message, {\n    success: true,\n    icon: \"check\",\n    header: \"Success\",\n    content: \"Your order has been created\"\n  }), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"media\",\n    type: \"file\",\n    label: \"Media\" //accept=\"image/*\"\n    ,\n    content: \"Select Image\",\n    onChange: handleChange\n  })), __jsx(Image, {\n    src: mediaPreview,\n    rounded: true,\n    centered: true,\n    size: \"small\"\n  }), __jsx(Form.Group, null, __jsx(\"p\", null, \"Create your own order:\")), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"name\",\n    label: \"Name\",\n    placeholder: \"Jane Smith\",\n    value: record.name,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"phone\",\n    label: \"Phone\",\n    placeholder: \"801-555-1234\",\n    value: record.phone,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: Input,\n    name: \"email\",\n    label: \"Email\",\n    placeholder: \"name@email.com\",\n    value: record.email,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Field, {\n    control: TextArea,\n    name: \"notes\",\n    label: \"Notes\",\n    placeholder: \"Type any special instructions here.\",\n    value: record.notes,\n    onChange: handleChange\n  })), __jsx(Form.Group, null, __jsx(Form.Dropdown, {\n    selection: true,\n    name: \"orderStatus\",\n    label: \"Status\",\n    placeholder: \"Open\",\n    options: statusOptions,\n    onChange: handleSelect,\n    required: true\n  }), __jsx(Form.Field, {\n    control: Input,\n    name: \"total\",\n    label: \"Total\",\n    placeholder: \"3.99\",\n    value: record.total,\n    onChange: handleChange,\n    required: true\n  })), __jsx(Form.Field, {\n    control: Button //disabled={disabled || loading}\n    ,\n    color: \"blue\",\n    content: \"Create\",\n    type: \"Submit\"\n  })));\n}\n\nexport default CreateOrder;","map":null,"metadata":{},"sourceType":"module"}
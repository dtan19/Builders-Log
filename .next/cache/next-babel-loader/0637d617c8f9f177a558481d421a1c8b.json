{"ast":null,"code":"import Log from '../../models/Log';\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  const log = await Log.findOne({\n    _id\n  });\n  res.status(200).json(log);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    mediaUrl,\n    date,\n    hours,\n    description,\n    notes\n  } = req.body;\n\n  try {\n    if (!date || !hours || !description || !notes || !mediaUrl) {\n      return res.status(422).send(\"log missing one or more fields\");\n    }\n\n    const log = await new Log({\n      date,\n      hours,\n      description,\n      notes,\n      mediaUrl\n    }).save();\n    res.status(201).json(log);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server failed to create log.\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Log.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n} //export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies, destroyCookie } from 'nookies';\nimport { redirectUser } from '../utils/auth';\nimport baseUrl from '../utils/baseUrl';\nimport axios from \"axios\";\nimport Router from 'next/router';\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"syncLogout\", event => {\n      if (event.key === 'logout') {\n        Router.push('/login');\n      }\n    });\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === '/account' || ctx.pathname === '/create';\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, '/login');\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === 'root';\n        const isAdmin = user.role === 'admin'; // If authenticated, but not of role admin, or root, we want to redirect from '/create' page.\n\n        const isNotPermitted = !(isRoot || isAdmin) && ctx.pathname === '/create';\n\n        if (isNotPermitted) {\n          redirectUser(ctx, '/');\n        }\n\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user.\", error); // Throw out invalid token\n\n        destroyCookie(ctx, \"token\"); // Redirect to login page\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.syncLogout);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, pageProps, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Order from '../../models/Order';\nimport connectDb from \"../../utils/connectDb\";\nimport jwt from 'jsonwebtoken';\nimport User from '../../models/User';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  const order = await Order.findOne({\n    _id\n  });\n  res.status(200).json(order);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    mediaUrl,\n    name,\n    phone,\n    email,\n    notes,\n    orderStatus,\n    total\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    //const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n    if (!name || !phone || !email || !orderStatus || !total) {\n      return res.status(422).send(\"order missing one or more fields\");\n    }\n\n    const order = await new Order({\n      name,\n      phone,\n      email,\n      notes,\n      orderStatus,\n      total,\n      mediaUrl\n    }).save();\n    res.status(201).json(order);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server failed to create order.\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Order.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n} //export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};","map":null,"metadata":{},"sourceType":"module"}
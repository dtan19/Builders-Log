{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/david/Dev/myapps/Builders-Log/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies } from 'nookies';\nimport { redirectUser } from '../utils/auth';\nimport baseUrl from '../utils/baseUrl';\nimport axios from \"axios\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === '/account' || ctx.pathname === '/create';\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, '/login');\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = respnse.data;\n        pageProps.user - user;\n      } catch (error) {\n        console.error(\"Error getting current user.\", error);\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/_app.js"],"names":["App","Layout","parseCookies","redirectUser","baseUrl","axios","MyApp","getInitialProps","Component","ctx","token","pageProps","isProtectedRoute","pathname","payload","headers","Authorization","url","response","get","user","respnse","data","error","console","render","props"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AACtB,eAAaO,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAM;AAAEC,MAAAA;AAAF,QAAYR,YAAY,CAACO,GAAD,CAA9B;AAEA,QAAIE,SAAS,GAAG,EAAhB;;AAEA,QAAIH,SAAS,CAACD,eAAd,EAA+B;AAC7BI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AAED,QAAI,CAACC,KAAL,EAAY;AACV,YAAME,gBAAgB,GAAGH,GAAG,CAACI,QAAJ,KAAiB,UAAjB,IAA+BJ,GAAG,CAACI,QAAJ,KAAiB,SAAzE;;AACA,UAAID,gBAAJ,EAAsB;AACpBT,QAAAA,YAAY,CAACM,GAAD,EAAM,QAAN,CAAZ;AACD;AACF,KALD,MAKO;AACL,UAAI;AACF,cAAMK,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAEN;AAAjB;AAAX,SAAhB;AACA,cAAMO,GAAG,GAAI,GAAEb,OAAQ,cAAvB;AACA,cAAMc,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUF,GAAV,EAAeH,OAAf,CAAvB;AACA,cAAMM,IAAI,GAAGC,OAAO,CAACC,IAArB;AACAX,QAAAA,SAAS,CAACS,IAAV,GAAiBA,IAAjB;AACD,OAND,CAME,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF;;AAED,WAAO;AAAEZ,MAAAA;AAAF,KAAP;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA,SAAF;AAAaG,MAAAA;AAAb,QAA2B,KAAKe,KAAtC;AACA,WACA,MAAC,MAAD,eAAYf,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADA;AAKD;;AArCqB;;AAwCxB,eAAeL,KAAf","sourcesContent":["import App from \"next/app\";\nimport Layout from \"../components/_App/Layout\";\nimport { parseCookies } from 'nookies';\nimport { redirectUser } from '../utils/auth';\nimport baseUrl from '../utils/baseUrl';\nimport axios from \"axios\";\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const { token } = parseCookies(ctx)\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === '/account' || ctx.pathname === '/create'\n      if (isProtectedRoute) {\n        redirectUser(ctx, '/login')\n      } \n    } else {\n      try {\n        const payload = { headers: { Authorization: token } }\n        const url = `${baseUrl}/api/account`\n        const response = await axios.get(url, payload)\n        const user = respnse.data\n        pageProps.user - user;\n      } catch (error) {\n        console.error(\"Error getting current user.\", error);\n      }\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n    <Layout {...pageProps}>\n      <Component {...pageProps} />\n    </Layout>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}
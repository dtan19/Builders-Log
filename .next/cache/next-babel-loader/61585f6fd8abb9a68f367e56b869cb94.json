{"ast":null,"code":"import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nexport default (async (req, res) => {\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // 2) Find cart based on user id, populate it\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    }); // 3) Calculate cart totals again from cart products\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products); // 3.1) Set status of order to Open\n\n    const {\n      orderStatus\n    } = \"Open\"; // 4) Get email from payment data, see if email is linked with existing Stripe customer data\n\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0; // 5) If not existing customer, create them based on their email\n\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id; // 6) Create charge with total, send reciept email\n\n    const charge = await stripe.charges.create({\n      currency: \"usd\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      idempotency_key: uuidv4()\n    }); // 7) Add order data to database\n\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      status: orderStatus,\n      total: cartTotal,\n      products: cart.products\n    }).save(); // 8) Clear products in cart\n\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    }); // 9) Send back success (200) response\n\n    res.status(200).send(\"Checkout successful\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Stripe system failed to respond.\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/checkout.js"],"names":["Stripe","uuidv4","jwt","Cart","Order","calculateCartTotal","stripe","process","env","STRIPE_SECRET_KEY","req","res","paymentData","body","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","products","orderStatus","prevCustomer","customers","list","email","limit","isExistingCustomer","data","length","newCustomer","create","source","id","customer","charge","charges","currency","amount","receipt_email","description","idempotency_key","status","total","save","findOneAndUpdate","_id","$set","send","error","console"],"mappings":"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","sourcesContent":["import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\n\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY)\n\nexport default async (req, res) => {\n    const { paymentData } = req.body\n\n    try {\n        // 1) Verify and get user id from token\n        const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n        // 2) Find cart based on user id, populate it\n        const cart = await Cart.findOne({ user: userId }).populate({\n            path: \"products.product\",\n            model: \"Product\"\n        });\n        // 3) Calculate cart totals again from cart products\n        const { cartTotal, stripeTotal } = calculateCartTotal(cart.products)\n        // 3.1) Set status of order to Open\n        const { orderStatus } = \"Open\"\n        // 4) Get email from payment data, see if email is linked with existing Stripe customer data\n        const prevCustomer = await stripe.customers.list({\n            email: paymentData.email,\n            limit: 1\n        })\n        const isExistingCustomer = prevCustomer.data.length > 0;\n        // 5) If not existing customer, create them based on their email\n       let newCustomer;\n       if (!isExistingCustomer) {\n           newCustomer = await stripe.customers.create({\n               email: paymentData.email,\n               source: paymentData.id\n           })\n       }\n       const customer = (isExistingCustomer && prevCustomer.data[0].id) || newCustomer.id;\n        // 6) Create charge with total, send reciept email\n        const charge = await stripe.charges.create({\n            currency: \"usd\",\n            amount: stripeTotal,\n            receipt_email: paymentData.email,\n            customer,\n            description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n        }, {\n            idempotency_key: uuidv4()\n        })\n        // 7) Add order data to database\n        await new Order({\n            user: userId,\n            email: paymentData.email,\n            status: orderStatus,\n            total: cartTotal,\n            products: cart.products\n        }).save()\n        // 8) Clear products in cart\n        await Cart.findOneAndUpdate(\n            { _id: cart._id },\n            { $set: { products: [] } }\n        )\n        // 9) Send back success (200) response\n        res.status(200).send(\"Checkout successful\")\n    } catch (error) {\n        console.error(error)\n        res.status(500).send(\"Stripe system failed to respond.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
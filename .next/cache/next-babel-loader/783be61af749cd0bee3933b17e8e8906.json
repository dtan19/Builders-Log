{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport mongoose from 'mongoose';\nvar connection = {};\n\nfunction connectDb() {\n  var db;\n  return _regeneratorRuntime.async(function connectDb$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!connection.isConnected) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(mongoose.connect(process.env.MONGO_SRV, {\n            useCreateIndex: true,\n            useFindAndModify: false,\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n          }));\n\n        case 4:\n          db = _context.sent;\n          //console.log(\"DB Connected\")\n          connection.isConnected = db.connections[0].readyState;\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n}\n\n;\nexport default connectDb;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/utils/connectDb.js"],"names":["mongoose","connection","connectDb","isConnected","connect","process","env","MONGO_SRV","useCreateIndex","useFindAndModify","useNewUrlParser","useUnifiedTopology","db","connections","readyState"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,IAAMC,UAAU,GAAG,EAAnB;;AAEA,SAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQD,UAAU,CAACE,WADnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAOqBH,QAAQ,CAACI,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC;AACrDC,YAAAA,cAAc,EAAE,IADqC;AAErDC,YAAAA,gBAAgB,EAAE,KAFmC;AAGrDC,YAAAA,eAAe,EAAE,IAHoC;AAIrDC,YAAAA,kBAAkB,EAAE;AAJiC,WAAxC,CAPrB;;AAAA;AAOUC,UAAAA,EAPV;AAaI;AACAX,UAAAA,UAAU,CAACE,WAAX,GAAyBS,EAAE,CAACC,WAAH,CAAe,CAAf,EAAkBC,UAA3C;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeC;AAED,eAAeZ,SAAf","sourcesContent":["import mongoose from 'mongoose'\nconst connection = {}\n\nasync function connectDb() {\n    if (connection.isConnected) {\n        //Use existing db connection\n        //console.log(\"Using existing connection\")\n        return;\n    }\n    //use new db connection\n    const db = await mongoose.connect(process.env.MONGO_SRV, {\n        useCreateIndex: true,\n        useFindAndModify: false,\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    })\n    //console.log(\"DB Connected\")\n    connection.isConnected = db.connections[0].readyState;\n};\n\nexport default connectDb;"]},"metadata":{},"sourceType":"module"}
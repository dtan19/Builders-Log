{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/david/Dev/myapps/Builders-Log/pages/cart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Segment } from 'semantic-ui-react';\nimport CartItemList from '../components/Cart/CartItemList';\nimport CartSummary from '../components/Cart/CartSummary';\nimport { parseCookies } from 'nookies';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\n\nfunction Cart(_ref) {\n  var products = _ref.products,\n      user = _ref.user;\n  console.log(products);\n  return __jsx(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(CartItemList, {\n    user: user,\n    products: products,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), __jsx(CartSummary, {\n    products: [],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }));\n}\n\nCart.getInitialProps = function _callee(ctx) {\n  var _parseCookies, token, url, payload, response;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _parseCookies = parseCookies(ctx), token = _parseCookies.token;\n\n          if (token) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            products: []\n          });\n\n        case 3:\n          url = \"\".concat(baseUrl, \"/api/cart\");\n          payload = {\n            headers: {\n              Authorization: token\n            }\n          };\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(axios.get(url, payload));\n\n        case 7:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Cart;","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/cart.js"],"names":["Segment","CartItemList","CartSummary","parseCookies","axios","baseUrl","Cart","products","user","console","log","getInitialProps","ctx","token","url","payload","headers","Authorization","get","response","data"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,SAASC,IAAT,OAAkC;AAAA,MAAlBC,QAAkB,QAAlBA,QAAkB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,SACI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AAAc,IAAA,IAAI,EAAEC,IAApB;AAA0B,IAAA,QAAQ,EAAED,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AAEDD,IAAI,CAACK,eAAL,GAAuB,iBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACDT,YAAY,CAACS,GAAD,CADX,EACXC,KADW,iBACXA,KADW;;AAAA,cAEdA,KAFc;AAAA;AAAA;AAAA;;AAAA,2CAGR;AAAEN,YAAAA,QAAQ,EAAE;AAAZ,WAHQ;;AAAA;AAKbO,UAAAA,GALa,aAKJT,OALI;AAMbU,UAAAA,OANa,GAMH;AAAEC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,EAAEJ;AAAjB;AAAX,WANG;AAAA;AAAA,2CAOIT,KAAK,CAACc,GAAN,CAAUJ,GAAV,EAAeC,OAAf,CAPJ;;AAAA;AAObI,UAAAA,QAPa;AAAA,2CAQZ;AAAEZ,YAAAA,QAAQ,EAAEY,QAAQ,CAACC;AAArB,WARY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAWA,eAAed,IAAf","sourcesContent":["import { Segment } from 'semantic-ui-react';\nimport CartItemList from '../components/Cart/CartItemList';\nimport CartSummary from '../components/Cart/CartSummary';\nimport { parseCookies } from 'nookies';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\n\nfunction Cart({ products, user }) {\n    console.log(products);\n    return (\n        <Segment>\n            <CartItemList user={user} products={products}/>\n            <CartSummary products={[]}/>\n        </Segment>\n    );\n}\n\nCart.getInitialProps = async ctx => {\n    const { token } = parseCookies(ctx)\n    if (!token) {\n        return { products: [] };\n    }\n    const url = `${baseUrl}/api/cart`\n    const payload = { headers: { Authorization: token }}\n    const response = await axios.get(url, payload)\n    return { products: response.data }\n}\n\nexport default Cart;"]},"metadata":{},"sourceType":"module"}
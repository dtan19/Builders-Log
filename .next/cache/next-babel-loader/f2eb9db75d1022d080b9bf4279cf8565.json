{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Check to see if the user already exists in the db\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    } // 2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); // 3) create user\n\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save();\n    console.log({\n      newUser\n    }); // 4) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); // 5) send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later.\");\n  }\n});","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/signup.js"],"names":["connectDb","User","bcrypt","jwt","req","res","name","email","password","body","user","findOne","status","send","hash","newUser","save","console","log","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AACA;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACU,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAIG,IAAJ,EAAU;AACN,aAAOL,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACH,KALD,CAMA;;;AACA,UAAMO,IAAI,GAAG,MAAMZ,MAAM,CAACY,IAAP,CAAYN,QAAZ,EAAsB,EAAtB,CAAnB,CAPA,CAQA;;AACA,UAAMO,OAAO,GAAG,MAAM,IAAId,IAAJ,CAAS;AAC3BK,MAAAA,IAD2B;AAE3BC,MAAAA,KAF2B;AAG3BC,MAAAA,QAAQ,EAAEM;AAHiB,KAAT,EAInBE,IAJmB,EAAtB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA;AAAD,KAAZ,EAdA,CAeA;;AACA,UAAMI,KAAK,GAAGhB,GAAG,CAACiB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEN,OAAO,CAACO;AAAlB,KAAT,EACdC,OAAO,CAACC,GAAR,CAAYC,UADE,EACU;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADV,CAAd,CAhBA,CAkBA;;AACArB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqBR,KAArB;AACH,GApBD,CAoBE,OAAOS,KAAP,EAAc;AACZX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAvB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gDAArB;AACH;AACJ,CA1BD","sourcesContent":["import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nconnectDb();\n\nexport default async (req, res) => {\n    const { name, email, password } = req.body\n    try {\n        // 1) Check to see if the user already exists in the db\n        const user = await User.findOne({ email })\n        if (user) {\n            return res.status(422).send(`User already exists with email ${email}`)\n        }\n        // 2) --if not, hash their password\n        const hash = await bcrypt.hash(password, 10)\n        // 3) create user\n        const newUser = await new User({\n            name,\n            email,\n            password: hash\n        }).save()\n        console.log({newUser})\n        // 4) create token for the new user\n        const token = jwt.sign({ userId: newUser._id }, \n        process.env.JWT_SECRET, { expiresIn: '7d' })\n        // 5) send back token\n        res.status(201).json(token)\n    } catch (error) {\n        console.error(error)\n        res.status(500).send(\"Error signing up user. Please try again later.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}
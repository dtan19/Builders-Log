{"ast":null,"code":"import Order from '../../models/Order';\nimport connectDb from \"../../utils/connectDb\";\nimport jwt from 'jsonwebtoken';\nimport User from '../../models/User';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  const order = await Order.findOne({\n    _id\n  });\n  res.status(200).json(order);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    name,\n    phone,\n    email,\n    notes,\n    orderStatus,\n    total\n  } = req.body;\n\n  try {\n    // 1) Verify and get user id from token\n    //const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n    if (!name || !phone || !email || !total) {\n      return res.status(422).send(\"order missing one or more fields\");\n    }\n\n    const order = await new Order({\n      name,\n      phone,\n      email,\n      notes,\n      orderStatus,\n      total,\n      mediaUrl\n    }).save();\n    res.status(201).json(order);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server failed to create order.\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Order.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n} //export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};","map":{"version":3,"sources":["/Users/david/Dev/myapps/Builders-Log/pages/api/order.js"],"names":["Order","connectDb","jwt","User","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","status","send","_id","query","order","findOne","json","name","phone","email","notes","orderStatus","total","body","mediaUrl","save","error","console","findOneAndDelete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAGAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,KAAL;AACI,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ,SAAK,MAAL;AACI,YAAMG,iBAAiB,CAACJ,GAAD,EAAMC,GAAN,CAAvB;AACA;;AACJ,SAAK,QAAL;AACI,YAAMI,mBAAmB,CAACL,GAAD,EAAMC,GAAN,CAAzB;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASP,GAAG,CAACE,MAAO,cAA1C;AACA;AAZR;AAcH,CAfD;;AAiBA,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACtC,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB;AACA,QAAMC,KAAK,GAAG,MAAMd,KAAK,CAACe,OAAN,CAAc;AAAEH,IAAAA;AAAF,GAAd,CAApB;AACAP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,KAArB;AACH;;AAED,eAAeN,iBAAf,CAAiCJ,GAAjC,EAAsCC,GAAtC,EAA2C;AACvC,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA,WAA7B;AAA0CC,IAAAA;AAA1C,MAAoDlB,GAAG,CAACmB,IAA9D;;AACA,MAAI;AACA;AACA;AACA,QAAK,CAACN,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,KAApB,IAA6B,CAACG,KAAnC,EAA2C;AACvC,aAAOjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kCAArB,CAAP;AACH;;AACD,UAAMG,KAAK,GAAG,MAAM,IAAId,KAAJ,CAAU;AAC1BiB,MAAAA,IAD0B;AAE1BC,MAAAA,KAF0B;AAG1BC,MAAAA,KAH0B;AAI1BC,MAAAA,KAJ0B;AAK1BC,MAAAA,WAL0B;AAM1BC,MAAAA,KAN0B;AAO1BE,MAAAA;AAP0B,KAAV,EAQjBC,IARiB,EAApB;AASApB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,KAArB;AACH,GAhBD,CAgBE,OAAMY,KAAN,EAAa;AACXC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACArB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB;AACH;AACJ;;AAED,eAAeF,mBAAf,CAAmCL,GAAnC,EAAwCC,GAAxC,EAA6C;AACzC,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB;AACA,QAAMb,KAAK,CAAC4B,gBAAN,CAAuB;AAAEhB,IAAAA;AAAF,GAAvB,CAAN;AACAP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAArB;AACH,C,CACD;AACA;AACA;AACA;AACA","sourcesContent":["import Order from '../../models/Order'\nimport connectDb from \"../../utils/connectDb\";\nimport jwt from 'jsonwebtoken';\nimport User from '../../models/User';\n\n\nconnectDb();\n\nexport default async (req, res) => {\n    switch (req.method) {\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"POST\":\n            await handlePostRequest(req, res);\n            break;\n        case \"DELETE\":\n            await handleDeleteRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`);\n            break;\n    }\n};\n\nasync function handleGetRequest(req, res) {\n    const { _id } = req.query\n    const order = await Order.findOne({ _id })\n    res.status(200).json(order)\n}\n\nasync function handlePostRequest(req, res) {\n    const { name, phone, email, notes, orderStatus, total } = req.body\n    try {\n        // 1) Verify and get user id from token\n        //const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n        if ( !name || !phone || !email || !total ) {\n            return res.status(422).send(\"order missing one or more fields\");\n        }\n        const order = await new Order({\n            name,\n            phone,\n            email,\n            notes,\n            orderStatus,\n            total,\n            mediaUrl\n        }).save();\n        res.status(201).json(order);\n    } catch(error) {\n        console.error(error);\n        res.status(500).send(\"Server failed to create order.\")\n    }\n}\n\nasync function handleDeleteRequest(req, res) {\n    const { _id } = req.query\n    await Order.findOneAndDelete({ _id })\n    res.status(204).json({})\n}\n//export default async (req, res) => {\n//    const { _id } = req.query\n//    const product = await Product.findOne({ _id })\n//    res.status(200).json(product)\n//};\n\n"]},"metadata":{},"sourceType":"module"}
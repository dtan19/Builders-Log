{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport { Header, Checkbox, Table, Icon } from 'semantic-ui-react';\nimport cookie from 'js-cookie';\nimport baseUrl from '../../utils/baseUrl';\nimport formatDate from '../../utils/formatDate';\n\nfunction AccountPermissions() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      users = _React$useState2[0],\n      setUsers = _React$useState2[1];\n\n  React.useEffect(function () {\n    getUsers();\n  }, []);\n\n  function getUsers() {\n    var url, token, payload, response;\n    return _regeneratorRuntime.async(function getUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"\".concat(baseUrl, \"/api/users\");\n            token = cookie.get(\"token\");\n            payload = {\n              headers: {\n                Authorization: token\n              }\n            };\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(url, payload));\n\n          case 5:\n            response = _context.sent;\n            setUsers(response.data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      margin: '2em 0'\n    }\n  }, __jsx(Header, {\n    as: \"h2\"\n  }, __jsx(Icon, {\n    name: \"settings\"\n  }), \"User Permissions\"), __jsx(Table, {\n    compact: true,\n    celled: true,\n    definition: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null), __jsx(Table.HeaderCell, null, \"Name\"), __jsx(Table.HeaderCell, null, \"Email\"), __jsx(Table.HeaderCell, null, \"Joined\"), __jsx(Table.HeaderCell, null, \"Updated\"), __jsx(Table.HeaderCell, null, \"Role\"))), __jsx(Table.Body, null, users.map(function (user) {\n    return __jsx(UserPermission, {\n      key: user._id,\n      user: user\n    });\n  }))));\n}\n\nfunction UserPermission(_ref) {\n  var user = _ref.user;\n\n  var _React$useState3 = React.useState(user.role === 'admin'),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      admin = _React$useState4[0],\n      setAdmin = _React$useState4[1];\n\n  var isFirstRun = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    updatePermission();\n  }, [admin]);\n\n  function handleChangePermission() {\n    setAdmin(function (prevState) {\n      return !prevState;\n    });\n  }\n\n  function updatePermission() {\n    var url, payload, response;\n    return _regeneratorRuntime.async(function updatePermission$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = \"\".concat(baseUrl, \"/api/account\");\n            payload = {\n              _id: user._id,\n              role: admin ? \"admin\" : \"user\"\n            };\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.put(url, payload));\n\n          case 4:\n            response = _context2.sent;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  }\n\n  return __jsx(Table.Row, null, __jsx(Table.Cell, {\n    collapsing: true\n  }, __jsx(Checkbox, {\n    checked: admin,\n    toggle: true,\n    onChange: handleChangePermission\n  })), __jsx(Table.Cell, null, user.name), __jsx(Table.Cell, null, user.email), __jsx(Table.Cell, null, formatDate(user.createdAt)), __jsx(Table.Cell, null, formatDate(user.updatedAt)), __jsx(Table.Cell, null, admin ? \"admin\" : \"user\"));\n}\n\nexport default AccountPermissions;","map":null,"metadata":{},"sourceType":"module"}